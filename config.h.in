// This file is part of the cwiclo project
//
// Copyright (c) 2018 by Mike Sharov <msharov@users.sourceforge.net>
// This file is free software, distributed under the MIT License.
//
// config.h generated by configure
#pragma once

// Define to the one symbol short name of this package.
#define @PKG_UNAME@_NAME		"@PKG_NAME@"
// Define to the version of this package.
#define @PKG_UNAME@_VERSION		@PKG_VERSION@
// Define to the version string of this package.
#define @PKG_UNAME@_VERSTRING	"@PKG_VERSTR@"
// Define to the address where bug reports for this package should be sent.
#define @PKG_UNAME@_BUGREPORT	"@PKG_BUGREPORT@"

#undef HAVE_ALLOCA_H		// Define to 1 if you have the <alloca.h> header file.
#undef HAVE_EXECINFO_H	// Define to 1 if you have the <execinfo.h> header file.
#undef HAVE_INTTYPES_H	// Define to 1 if you have the <inttypes.h> header file.
#undef HAVE_STDINT_H		// Define to 1 if you have the <stdint.h> header file.
#undef HAVE_SYS_MMAN_H	// Define to 1 if you have the <sys/mman.h> header file.
#undef HAVE_SYS_TYPES_H	// Define to 1 if you have the <sys/types.h> header file.
#define HAVE_VA_COPY 1		// Define to 1 if you have the __va_copy function
#define HAVE_STRSIGNAL 1	// Define to 1 if you have the 'strsignal' function.

// Common includes
#include <stddef.h>
#include <stdbool.h>
#if HAVE_SYS_TYPES_H
    #include <sys/types.h>
#endif
#if HAVE_STDINT_H
    #include <stdint.h>
#elif HAVE_INTTYPES_H
    #include <inttypes.h>
#endif
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <limits.h>
#include <errno.h>
#include <assert.h>

// gcc attribute shortcuts
#define PRINTFARGS(fmt,args)    __attribute__((__format__(__printf__,fmt,args)))
#define CONST                   __attribute__((const))
#define PURE                    __attribute__((pure))
#define UNUSED                  __attribute__((unused))
#define MALLOCLIKE              __attribute__((malloc))
#define FORMATARG(fmt)          __attribute__((format_arg(fmt)))
#define NONNULL(...)            __attribute__((nonnull(__VA_ARGS__)))
#define likely(x)               __builtin_expect(!!(x), 1)
#define unlikely(x)             __builtin_expect(!!(x), 0)
#define compile_constant(x)     __builtin_constant_p(x)
#if defined(NDEBUG) && !defined(inline)
    #define inline		__attribute__((always_inline)) inline
#endif
