#! /bin/sh
######################################################################
# Project Configuration						     #
######################################################################

PKG_NAME="cwiclo"
PKG_VERSTR="v1.0"

MNT_NAME="Mike Sharov"
MNT_MAIL="zfunebi@hfref.fbheprsbetr.arg"

# Files that get created by this script
FILES="Config.mk config.h $PKG_NAME.pc"

# Package options
COMPONENTS='
{
name=[with-debug]
desc=[	Compile for debugging]
seds=[s/^#\(DEBUG\)/\1/]
}{
name=[with-native]
desc=[	Use -march=native]
seds=[s/ -std=c/ -march=native -std=c/]
}';

# Header files
HEADERS="alloca.h execinfo.h inttypes.h stdint.h sys/mman.h sys/types.h"

# Libraries
LIBS=""

# First pair is used if nothing matches
PROGS="CC=gcc CC=clang CXX=g++ CXX=clang++ AR=ar RANLIB=ranlib RANLIB=touch INSTALL=install"

# Automatic vars
[ -d .git ] && PKG_VERSTR=`git describe --always`
PKG_MAJOR=`expr "$PKG_VERSTR" : 'v\([0-9]*\)\.[0-9]*'`
PKG_MINOR=`expr "$PKG_VERSTR" : 'v[0-9]*\.\([0-9]*\)'`
PKG_STRING="$PKG_NAME $PKG_VERSTR"
MNT_MAIL=`echo $MNT_MAIL|tr a-z n-za-m`
PKG_BUGREPORT="$MNT_NAME <$MNT_MAIL>"

# Miscellaneous substitutions
CUSTSUBS="s/@PKG_NAME@/$PKG_NAME/g
s/@PKG_VERSION@/"0x$PKG_MAJOR${PKG_MINOR}"/g
s/@PKG_VERSTR@/$PKG_VERSTR/g
s/@PKG_STRING@/$PKG_STRING/g
s/@PKG_UNAME@/`echo $PKG_NAME|tr a-z A-Z`/g
s/@PKG_BUGREPORT@/$PKG_BUGREPORT/g
s/@PKG_MAJOR@/$PKG_MAJOR/g
s/@PKG_MINOR@/$PKG_MINOR/g"

######################################################################
#### The rest of the file is configuration code. Leave it alone. #####
######################################################################

die() { rm -f config.sed; exit; }
sub() { printf "%s\n" "$1">>config.sed; }
escpath() { echo $1 | sed 's/\//\\\//g'; }

#### Compile the configurator and generate initial config.sed ########

if [ -z "$CC" ]; then
    for i in gcc clang cc; do
	CC=`which $i 2>/dev/null` && break
    done
    CC=`basename $CC`
fi
[ -z "$CC" ] && "No C compiler found" && die

# Determine gcc private directory
LIBGCC=`$CC -print-libgcc-file-name`
PLIBDIR=`dirname $LIBGCC`
PINCDIR=$PLIBDIR/include
[ -d $PINCDIR ] || PINCDIR=$PLIBDIR/../include

#### Set host-dependent options ######################################

SYSNAME=`uname|tr A-Z a-z`
case "$SYSNAME" in
    *solaris*| *sun*)	SYSNAME="sun";;
    *darwin*| *osx*)	SYSNAME="mac";;
    *bsd*)		SYSNAME="bsd";;
    *)			SYSNAME="linux";;
esac

if [ "$SYSNAME" = "mac" -o "$SYSNAME" = "bsd" ]; then
    sub "s/#define \(HAVE_STRSIGNAL\) 1/#undef \1/g"
fi
if [ "$SYSNAME" = "bsd" ]; then
    sub "s/#define \(HAVE_VA_COPY\) 1/#undef \1/"
fi
if [ "$SYSNAME" != "linux" ]; then
    sub "s/-p --ignore-fail-on-non-empty//"
fi

#### Printing helper functions #######################################

PrintComponents() {
    local cc name desc
    cc=$COMPONENTS
    echo "Options:"
    while [ ! -z "$cc" ]; do
	name=`expr "$cc" : '[^}]*name=\[\([^]]*\)\]'`
	desc=`expr "$cc" : '[^}]*desc=\[\([^]]*\)\]'`
	echo "  --$name	$desc"
	cc=`expr "$cc" : '[^}]*}\(.*\)'`
    done
    echo
}

PrintHelp() {
    echo "This program configures $PKG_STRING to adapt to many kinds of systems.

Usage: configure [OPTION]...

Configuration:
  -h, --help		display this help and exit
  -V, --version		display version information and exit

Installation directories:
  --prefix=PREFIX	architecture-independent files [/usr/local]
  --libdir=DIR		object code libraries [PREFIX/lib]
  --includedir=DIR	C header files [PREFIX/include]
  --docdir=DIR		documentation directory [PREFIX/share/doc]
  --customincdir=DIR	Additional include directory
  --customlibdir=DIR	Additional library directory
  --builddir=DIR	location for compiled objects [/tmp/$USER/make]
"
    PrintComponents
    echo "Report bugs to $PKG_BUGREPORT."
}

PrintVersion() {
    echo "$PKG_NAME configure $PKG_VERSTR"
}

SubVar() {
    local esc2
    esc2=`escpath $2`
    eval ac_var_$1='$esc2';
    sub "s/@$1@/$esc2/g"
}

SubComp() {
    local cc name seds
    cc=$COMPONENTS
    while [ ! -z "$cc" ]; do
	name=`expr "$cc" : '[^}]*name=\[\([^]]*\)\]'`
	seds=`expr "$cc" : '[^}]*seds=\[\([^]]*\)\]'`
	[ "$name" = "$1" ] && sub "$seds"
	cc=`expr "$cc" : '[^}]*}\(.*\)'`
    done
}

for i in $*; do
    case $i in
	--)		break;;
	--version |-V)	PrintVersion && die;;
	--help |-h |-?)	PrintHelp && die;;
	--*=*)		SubVar `expr "$i" : '--\([^=]*\)='` `expr "$i" : '[^=]*=\(.*\)'`;;
	--*)		SubComp `expr "$i" : '--\(.*\)'`;;
	*)		echo "Error: unrecognized option \"$i\"" && die;;
    esac
done

#### Set directory prefixes ##########################################

sub "s/@prefix@/${ac_var_prefix:=\/usr\/local}/g
s/@bindir@/$ac_var_prefix\/bin/g
s/@docdir@/$ac_var_prefix\/share\/doc/g
s/@includedir@/${ac_var_includedir:=$ac_var_prefix\/include}/g
s/@oldincludedir@/${ac_var_oldincludedir:=\/usr\/include}/g
s/@libdir@/${ac_var_libdir:=$ac_var_prefix\/lib}/g
s/@builddir@/\/tmp\/$USER\/make/g
s/@gccincludedir@/${ac_var_gccincludedir:=`escpath $PINCDIR`}/g
s/@gcclibdir@/${ac_var_gcclibdir:=`escpath $PLIBDIR`}/g
s/@pkgconfigdir@/${ac_var_pkgconfigdir:=$ac_var_libdir\/pkgconfig}/g
s/@customincdir@/${ac_var_customincdir:=$ac_var_prefix\/include}/g
s/@customlibdir@/${ac_var_customlibdir:=$ac_var_prefix\/lib}/g"

if [ "$ac_var_prefix" != "\/usr\/local" -a "$ac_var_prefix" != "\/usr" ]; then
    sub "s/ @CUSTOMINCDIR@/ -I$ac_var_customincdir/g;s/ @CUSTOMLIBDIR@/ -L$ac_var_customlibdir/g"
else
    sub "s/ @CUSTOMINCDIR@//g;s/ @CUSTOMLIBDIR@//g"
fi

# See if pkg-config is installed
PKGCONFIGDIR=`echo $ac_var_pkgconfigdir | sed 's/\\\\//g'`
[ ! -d $PKGCONFIGDIR ] || sub "s/#\(PKGCONFIGDIR\)/\1/"

#### Find headers, libs, programs, and subs ##########################

SubHeadLibsProgs() {
local INCPATH LIBPATH LIBSUFFIX found pname pcall esciv
INCPATH="$ac_var_includedir $ac_var_gccincludedir $ac_var_customincdir $ac_var_oldincludedir /usr/include/x86_64-linux-gnu"
INCPATH=`echo $INCPATH | sed 's/\\\\//g'`
for i in $HEADERS; do
    for p in $INCPATH; do
	if [ -r "$p/$i" ]; then
	    sub "s/#undef \(HAVE_`echo $i|tr a-z/.- A-Z___`\)/#define \1 1/"
	    break
	fi
    done
done

LIBPATH="`echo $LD_LIBRARY_PATH | tr ':' ' '` $ac_var_libdir $ac_var_gcclibdir $ac_var_customlibdir /lib /usr/lib /usr/local/lib /usr/lib/x86_64-linux-gnu"
LIBPATH=`echo $LIBPATH | sed 's/\\\\//g'`
LIBSUFFIX="so a la dylib"
for i in $LIBS; do
    found=
    for p in $LIBPATH; do
	for s in $LIBSUFFIX; do
	    if [ -r "$p/lib$i.$s" ]; then
		found=" -l$i"
		break
	    fi
	done
	[ -z "$found" ] || break
    done
    sub "s/ @lib$i@/$found/g"
done

for i in $PROGS; do
    pname=`expr "$i" : '\([^=]*\)=[^=]*'`
    pcall=`expr "$i" : '[^=]*=\([^=]*\)'`
    ppath=`eval echo \$\{$pname\}`
    ppath=`escpath "$ppath"`
    # First check if an environment variable is set
    [ ! -z "$ppath" ] && sub "s/@$pname@/$ppath/g"
    # Check if the program exists
    [ -x `which $pcall 2>/dev/null` ] && sub "s/@$pname@/$pcall/g"
done
# If nothing found in first loop, set the first pair anyway.
for i in $PROGS; do
    pname=`expr "$i" : '\([^=]*\)=[^=]*'`
    pcall=`expr "$i" : '[^=]*=\([^=]*\)'`
    sub "s/@$pname@/$pcall/g"
done
# And, finally, the environment variables
for i in $ENVIRONS; do
    esciv="`eval echo '"'\$\{$i\}'"'|sed 's/\//\\\&/g'`"
    ppath=`eval echo \$\{$pname\}`
    ppath=`escpath "$ppath"`
    [ ! -z "$ppath" ] && ppath=" $ppath"
    sub "s/ @$i@/$ppath/g"
done
sub "$CUSTSUBS"
}
SubHeadLibsProgs

#### Apply substitutions to all files ################################

for i in $FILES; do
    sed -f config.sed $i.in > $i
done

touch config.status
echo "#! /bin/sh
$0 $*
`tail -n+3 config.status`" > config.status.new
chmod u+x config.status.new
mv config.status.new config.status

die
